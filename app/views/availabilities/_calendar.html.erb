<% content_for :head_links do %>
    <script type="text/javascript" src="/javascripts/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="/javascripts/jquery-ui-1.7.2.custom.min.js"></script>
    <script type="text/javascript" src="/javascripts/jquery.qtip-1.0.0-rc3.min.js"></script>
    <script type="text/javascript" src="/calendarflow/jquery.calendarflow.js"></script>
    <link rel="stylesheet" type="text/css" href="/calendarflow/calendarflow.css?1" />
    <link rel="stylesheet" type="text/css" href="/stylesheets/jquery-ui-1.7.2.custom.css" />
<% end %>
<div id="calendarInstructions">You can pick up and drag this calendar (like a map)</div>
<div id="eventsCalendar"></div>
<script type="text/javascript">

    $(document).ready(function(){
        var userid = '<%= current_user.nil? ? '' : current_user.id %>';
        var delete_form_template = '<%= escape_javascript(button_to('Delete', Availability.new(), :confirm => 'Are you sure?', :method => :delete)) %>';
        Date.prototype.format=function(format){var returnStr='';var replace=Date.replaceChars;for(var i=0;i<format.length;i++){var curChar=format.charAt(i);if(replace[curChar]){returnStr+=replace[curChar].call(this);}else{returnStr+=curChar;}}return returnStr;};Date.replaceChars={shortMonths:['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'],longMonths:['January','February','March','April','May','June','July','August','September','October','November','December'],shortDays:['Sun','Mon','Tue','Wed','Thu','Fri','Sat'],longDays:['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],d:function(){return(this.getDate()<10?'0':'')+this.getDate();},D:function(){return Date.replaceChars.shortDays[this.getDay()];},j:function(){return this.getDate();},l:function(){return Date.replaceChars.longDays[this.getDay()];},N:function(){return this.getDay()+1;},S:function(){return(this.getDate()%10==1&&this.getDate()!=11?'st':(this.getDate()%10==2&&this.getDate()!=12?'nd':(this.getDate()%10==3&&this.getDate()!=13?'rd':'th')));},w:function(){return this.getDay();},z:function(){return"Not Yet Supported";},W:function(){return"Not Yet Supported";},F:function(){return Date.replaceChars.longMonths[this.getMonth()];},m:function(){return(this.getMonth()<9?'0':'')+(this.getMonth()+1);},M:function(){return Date.replaceChars.shortMonths[this.getMonth()];},n:function(){return this.getMonth()+1;},t:function(){return"Not Yet Supported";},L:function(){return"Not Yet Supported";},o:function(){return"Not Supported";},Y:function(){return this.getFullYear();},y:function(){return(''+this.getFullYear()).substr(2);},a:function(){return this.getHours()<12?'am':'pm';},A:function(){return this.getHours()<12?'AM':'PM';},B:function(){return"Not Yet Supported";},g:function(){return this.getHours()%12||12;},G:function(){return this.getHours();},h:function(){return((this.getHours()%12||12)<10?'0':'')+(this.getHours()%12||12);},H:function(){return(this.getHours()<10?'0':'')+this.getHours();},i:function(){return(this.getMinutes()<10?'0':'')+this.getMinutes();},s:function(){return(this.getSeconds()<10?'0':'')+this.getSeconds();},e:function(){return"Not Yet Supported";},I:function(){return"Not Supported";},O:function(){return(-this.getTimezoneOffset()<0?'-':'+')+(Math.abs(this.getTimezoneOffset()/60)<10?'0':'')+(Math.abs(this.getTimezoneOffset()/60))+'00';},T:function(){var m=this.getMonth();this.setMonth(0);var result=this.toTimeString().replace(/^.+ \(?([^\)]+)\)?$/,'$1');this.setMonth(m);return result;},Z:function(){return-this.getTimezoneOffset()*60;},c:function(){return"Not Yet Supported";},r:function(){return this.toString();},U:function(){return this.getTime()/1000;}};

        $("table.availabilities").hide();


        var parseISODate = function(time) {
            return new Date(Date.parse(time.replace(/-/g, "/").replace(/[TZ]/g, " ")));
        };

        var formatTags = function (availability) {
            var html = [];
            $.each(availability.tags,function(index) {
                html += "<a href=\"/tags/" + escape(this.tag) + "\">" + this.tag + "</a>";
                if (index < availability.tags.length - 1) {
                    html += ', ';
                }
            });
            return html;
        };

        var formatPairs = function (availability) {
            return availability.pairs.length == 0 ? "No" : '<a href="/availabilities/' + availability.id + '">Yes (' + availability.pairs.length + ')</a>';
        };

        var getStatus = function(availability) {
            var paired = false;
            $.each(availability.pairs,function() {
                if (this.accepted && this.suggested) paired = true;
            });
            return paired ? "Paired" : "Open";
        };

        var formatProject = function(project) {
            return /^https?:\/\//.test(project) ? '<a href="' + project + '">' + project + '</a>' : project;
            
        };

        var convertAvailabilitiesToEvents = function(availabilities) {
            var events = [];
            $.each(availabilities, function() {
                var avail = this;
                avail.title = '<a href="/' + avail.user.username + '">' + avail.user.username + '</a>';
                avail.summary = '<p>On: <span>' + ((avail.project) ? formatProject(avail.project) : "anything") + '</span></p>' +
                                            '<p>Tags: <span>' + formatTags(avail) + '</span></p>' +
                                            '<p>Pairs: <span>' + formatPairs(avail) + '</span></p>';

                var status = getStatus(avail);
                avail.summary += '<p>Status: <span class="' + status.toLowerCase() + '">' + status + '</span></p>';

                if (userid == avail.user_id) {
                  avail.summary += '<div><a href="/availabilities/' + avail.id + '/edit">Edit</a></p>';
                  avail.summary += delete_form_template.replace(/\/availabilities/,"/availabilities/" + avail.id);
                  avail.summary += '</div>';
                }

                avail.start_time = parseISODate(avail.start_time);
                avail.end_time = parseISODate(avail.end_time);
                events.push({"event":avail});
            });
            return events;
        };

        var buildJsonUrl = function (fromDate,toDate) {
            return (document.location.href.match(/\/$/) ? document.location.href + "availabilities" : document.location.href) +
                   ".js?from_date=" + fromDate.format('Y-m-d') + "&to_date=" + toDate.format('Y-m-d');
        };

        var findEvents = function(fromDate,toDate,calendar) {

             $.getJSON(buildJsonUrl(fromDate,toDate),
               function(data){
                   var events = convertAvailabilitiesToEvents(data);
                   if (events.length > 0) {
                      calendar.renderEvents(events);
                   }
               }
            );

        };

        $("#eventsCalendar").calendarFlow({
            "dayHeight": 720,
            "dayWidth": 200,
            "findEventsCallback": findEvents,
            "moveEventCallback" : function(movedEvent) {
                try {
                    console.log("TODO: Post new start time (" + movedEvent.start_time + ") back to server")
                }
                catch(ex) {}
            }

        });

        var resizeCalendar = function() {
            $("#eventsCalendar").css("height", ($(window).height() - $("#eventsCalendar").position().top - 50) + "px");
        };

        var resizeTimer = null;
        $(window).bind('resize', function() {
            if (resizeTimer) clearTimeout(resizeTimer);
            resizeTimer = setTimeout(resizeCalendar, 100);
        });

        resizeCalendar();
    });

</script>